package adbTool.ui;

import java.awt.Color;
import java.awt.FileDialog;

import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.List;

import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import adbTool.ADBWrapper;

public class ChooseAndInstallAPKDialog extends javax.swing.JDialog {

	/**
	 * Creates new form InstallAPK
	 */
	public ChooseAndInstallAPKDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		_filename = new javax.swing.JTextField();
		_browse = new javax.swing.JButton();
		_cancle = new javax.swing.JButton();
		_install = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setLocationByPlatform(true);
		setMaximumSize(new java.awt.Dimension(600, 200));
		setMinimumSize(new java.awt.Dimension(600, 200));
		setPreferredSize(new java.awt.Dimension(600, 200));
		setResizable(false);

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		jLabel1.setText("Select APK File ");

		_filename.setToolTipText("");

		jPanel1.setDropTarget(new DropTarget() {
			public synchronized void drop(DropTargetDropEvent evt) {
				try {
					evt.acceptDrop(DnDConstants.ACTION_COPY);
					List<File> droppedFiles = (List<File>) evt
							.getTransferable().getTransferData(
									DataFlavor.javaFileListFlavor);
					for (File file : droppedFiles) {
						String name = file.getName();
						String ext = name.substring(name.lastIndexOf('.') + 1);
						if (ext.toLowerCase().contains("apk")) {
							_filename.setText(file.getAbsolutePath());
						}
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		});
		_filename.setDropTarget(new DropTarget() {
			public synchronized void drop(DropTargetDropEvent evt) {
				try {
					evt.acceptDrop(DnDConstants.ACTION_COPY);
					List<File> droppedFiles = (List<File>) evt
							.getTransferable().getTransferData(
									DataFlavor.javaFileListFlavor);
					for (File file : droppedFiles) {
						String name = file.getName();
						String ext = name.substring(name.lastIndexOf('.') + 1);
						if (ext.toLowerCase().contains("apk")) {
							_filename.setText(file.getAbsolutePath());
						}
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		});
		_browse.setText("browse");
		_browse.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser fc = new JFileChooser();
				FileFilter apkfilter = new FileNameExtensionFilter("Apk Files",
						"apk");
				fc.setFileFilter(apkfilter);
				fc.setAcceptAllFileFilterUsed(false);
				if (fc.showOpenDialog(ChooseAndInstallAPKDialog.this) == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					_filename.setText(file.getPath());
					System.out.println("getAbsolutePath "
							+ file.getAbsolutePath());
					System.out.println("path: " + file.getPath());

					System.out.println("getName: " + file.getName());
				}
			}
		});
		_cancle.setText("Cancel");
		_cancle.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				ChooseAndInstallAPKDialog.this.setVisible(false);
			}
		});
		_install.setText("Install");
_install.addActionListener(new ActionListener() {
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		Process installProcess = ADBWrapper.getInstance().excuteADBCommand("install", _filename.getText());
		ProgressBar p = new ProgressBar();
		p.run();
		try {
			installProcess.waitFor();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		p.close();
	}
});
		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
		.setHorizontalGroup(jPanel1Layout
				.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
								.createSequentialGroup()
								.addGap(210, 210, 210)
								.addComponent(jLabel1)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
										.addGroup(
												jPanel1Layout
												.createSequentialGroup()
												.addContainerGap()
												.addGroup(
														jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				_install)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																						.addComponent(
																								_cancle))
																								.addGroup(
																										javax.swing.GroupLayout.Alignment.TRAILING,
																										jPanel1Layout
																										.createSequentialGroup()
																										.addComponent(
																												_filename)
																												.addPreferredGap(
																														javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																_browse)))
																																.addContainerGap()));
		jPanel1Layout
		.setVerticalGroup(jPanel1Layout
				.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel1)
								.addGap(34, 34, 34)
								.addGroup(
										jPanel1Layout
										.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(_browse)
												.addComponent(
														_filename,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																39, Short.MAX_VALUE)
																.addGroup(
																		jPanel1Layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(_cancle)
																				.addComponent(_install))
																				.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
						jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
						.addComponent(jPanel1,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	/**
	 * @param args
	 *            the command line arguments
	 */
	public void run(){
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(
					ChooseAndInstallAPKDialog.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(
					ChooseAndInstallAPKDialog.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(
					ChooseAndInstallAPKDialog.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(
					ChooseAndInstallAPKDialog.class.getName()).log(
							java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		// /* Create and display the dialog */
		// java.awt.EventQueue.invokeLater(new Runnable() {
		// public void run() {
		// InstallAPK dialog = new InstallAPK(new javax.swing.JFrame(), true);
		// dialog.addWindowListener(new java.awt.event.WindowAdapter() {
		// @Override
		// public void windowClosing(java.awt.event.WindowEvent e) {
		// System.exit(0);
		// }
		// });
		setVisible(true);
		// }
		// });
	}

	// Variables declaration - do not modify
	private javax.swing.JButton _browse;
	private javax.swing.JButton _cancle;
	private javax.swing.JTextField _filename;
	private javax.swing.JButton _install;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	// End of variables declaration
}
